package prometheus

import (
	"github.com/gin-gonic/gin"
	"github.com/mateuszmierzwinski/libmicro/config"
	"github.com/mateuszmierzwinski/libmicro/providersvc"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"net/http"
)

/*
unifiedMetricsProvider implements Endoint interface and provides /metrics endpoint functionality binded with Prometheus library (wrapper)
*/
type unifiedMetricsProvider struct {
	pMetrics http.Handler
}

/*
GetInfo returns endpoint info to be displayed by logs
 */
func (m *unifiedMetricsProvider) GetInfo() *providersvc.APIInfo {
	return &providersvc.APIInfo{ProviderName: "Unified Metrics Provider for Prometheus"}
}

/*
Register sets up metrics endpoint in Gin Router
 */
func (m *unifiedMetricsProvider) Register(router *gin.Engine, configProvider config.Provider) {
	router.GET(configProvider.GetConfigWithDefaultValue("ENDPOINT_METRICS", "/metrics"), m.getPrometheusMetricsAsGinEndpoint)
}

/*
getPrometheusMetricsAsGinEndpoint returns metrics generated by prometeus plugin
*/
func (m *unifiedMetricsProvider) getPrometheusMetricsAsGinEndpoint(context *gin.Context) {
	defer context.Done()
	m.pMetrics.ServeHTTP(context.Writer, context.Request)
}

/*
New starts new instance of metrics provider
*/
func New() providersvc.APIProvider {
	hc := &unifiedMetricsProvider{
		pMetrics: promhttp.Handler(),
	}

	return hc
}

